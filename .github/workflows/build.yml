name: build
on: [push, pull_request]
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        enable_ui: [on]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - name: ccache
      uses: hendrikmuhs/ccache-action@v1
      if: runner.os == 'Linux'
      with:
        key: ${{ matrix.os }}-${{ matrix.enable_ui }}
    - uses: seanmiddleditch/gha-setup-ninja@master
    - uses: ilammy/msvc-dev-cmd@v1
      if: runner.os == 'Windows'
    - name: Install Dependencies
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]] ; then
          sudo apt-get update -qq
          sudo apt-get install -y \
            libx11-dev libxcursor-dev libxi-dev g++ clang-10 libc++-10-dev libc++abi-10-dev cmake ninja-build libx11-dev libxcursor-dev libxi-dev libgl1-mesa-dev libfontconfig1-dev
        fi
    - name: Generating Makefiles
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]] ; then
          export enable_ccache=off
        else
          export enable_ccache=on
        fi
        if [[ "${{ runner.os }}" == "Windows" ]] ; then
          curl -o Skia-Windows-Release-x64.zip https://github.com/aseprite/skia/releases/download/m102-861e4743af/Skia-Windows-Release-x64.zip
          powershell.exe -nologo -noprofile -command "& { Add-Type -A 'System.IO.Compression.FileSystem'; [IO.Compression.ZipFile]::ExtractToDirectory('Skia-Windows-Release-x64.zip', '/skiadir'); }"
        elif [[ "${{ runner.os }}" == "Linux" ]] ; then
          wget https://github.com/aseprite/skia/releases/download/m102-861e4743af/Skia-Linux-Release-x64.zip
          sudo unzip Skia-Linux-Release-x64.zip -d /skiadir
          export CC=/usr/bin/clang-10
          export CXX=/usr/bin/clang++-10
        fi
        cmake -S . -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9 \
          -DENABLE_TESTS=ON \
          -DENABLE_UI=${{ matrix.enable_ui }} \
          -DENABLE_CCACHE=$enable_ccache \
          -DLAF_BACKEND=skia \
          -DSKIA_DIR=/skiadir \
          -DSKIA_LIBRARY_DIR=/skiadir/out/Release-x64 \
          -DCMAKE_CXX_FLAGS=--stdlib=libc++ \
          -DCMAKE_EXE_LINKER_FLAGS=--stdlib=libc++ 
    - name: Compiling
      shell: bash
      run: |
        cd build && ninja
    - name: Running C++ Tests
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]] ; then
          export XVFB=xvfb-run
        fi
        cd build && $XVFB ctest --output-on-failure
    - name: Running CLI Tests
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]] ; then
          export XVFB=xvfb-run
        fi
        export ASEPRITE=$PWD/build/bin/aseprite
        cd tests
        $XVFB bash run-tests.sh
    - name: Upload build result
      uses: actions/upload-artifact@v3
      with:
        name: "build-result-${{ runner.os }}"
        path: |
          build/bin
